// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model

model User {
  UserID     Int        @id @default(autoincrement())
  Username   String?
  Password   String
  Email      String     @unique
  Token      String     @default("")
  isVerified Boolean    @default(false)
  RoleID     Int
  Role       Role[]
  Clients    Client[]
  Cases      Case[]
  Blogs      BlogPost[]
  contacts   Contact[]

  @@unique([UserID])
  @@map("users")
}

// Role model
model Role {
  RoleID   Int    @id @default(autoincrement())
  RoleName String
  Users    User   @relation(fields: [userId], references: [UserID])
  userId   Int

  @@unique([RoleID])
  @@map("roles")
}

// Client model

model Client {
  ClientID       Int             @id @default(autoincrement())
  FirstName      String
  LastName       String
  ContactNumber  String
  Email          String
  Address        String
  Gender         String 
  Case           Case?           @relation(fields: [CaseID], references: [CaseID])
  CaseID         Int?
  User           User            @relation(fields: [userId], references: [UserID])
  userId         Int
  Documents      Document[]
  Communications Communication[]
  isDeleted      Boolean         @default(false)
  Contact        Contact[]

  @@unique([ClientID])
  @@map("clients")
}

// Case model
model Case {
  CaseID         Int      @id @default(autoincrement())
  CaseName       String
  AssignedUserID Int
  AssignedUser   User     @relation(fields: [AssignedUserID], references: [UserID])
  Clients        Client[]

  @@unique([CaseID])
  @@map("cases")
}

// Document model
model Document {
  DocumentID   Int      @id @default(autoincrement())
  DocumentName String
  FilePath     String
  Content      Bytes
  UploadDate   DateTime @default(now())
  ClientID     Int
  Client       Client   @relation(fields: [ClientID], references: [ClientID])

  @@unique([DocumentID])
  @@map("document")
}

model BlogPost {
  BlogID   Int      @id @default(autoincrement())
  BlogPost String
  FilePath String
  Upload   DateTime @default(now())
  User     User     @relation(fields: [UserID], references: [UserID])
  UserID   Int

  @@unique([BlogID])
  @@map("blogpost")
}

model Communication {
  CommunicationID   Int      @id @default(autoincrement())
  CommunicationType String
  CommunicationDate DateTime @default(now())
  Description       String
  ClientID          Int
  Client            Client   @relation(fields: [ClientID], references: [ClientID])

  @@unique([CommunicationID])
  @@map("communication")
}


model Contact {
  ContactID   Int    @id @default(autoincrement())
  Name        String
  Email       String
  PhoneNumber String
  Description String
  ClientID    Int
  Client      Client @relation(fields: [ClientID], references: [ClientID])
  User        User?  @relation(fields: [userUserID], references: [UserID])
  userUserID  Int?

  @@unique([ContactID])
  @@map("contact")
  
}
